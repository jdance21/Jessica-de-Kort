## it works, goes through everything and gives Mean Dice coefficient: 0.012799489

import keras
import numpy as np
from keras.models import Model
from keras.layers import Input, Conv3D, concatenate, BatchNormalization
from keras import backend as K
import tensorflow as tf

# Load the ultrasound and segmentation data
test_ultrasound_fullname = r'\Users\Jessica\Desktop\Processed Data\Testing\test_image_array.npy'
test_segmentation_fullname = r'\Users\Jessica\Desktop\Processed Data\Testing\test_segmentation_array.npy'
test_ultrasound_data = np.load(test_ultrasound_fullname)
test_segmentation_data = np.load(test_segmentation_fullname)
ultrasound_size = test_ultrasound_data.shape[1:4]
testing_ultrasound_data = np.reshape(test_ultrasound_data, (test_ultrasound_data.shape[0], 128, 128, 128, 1))
testing_segmentation_data = np.reshape(test_segmentation_data, (test_segmentation_data.shape[0], 128, 128, 128, 1))

num_classes = 2
filter_multiplier = 6

# Define the U-Net model
# from Nikki
def nvidia_unet(input_size=128, num_classes=num_classes, activation='softmax'):
    input_ = Input((input_size, input_size, input_size, 1))
    skips = []
    output = input_
    c = num_classes
    num_layers = int(np.floor(np.log2(input_size)))
    down_conv_kernel_sizes = np.zeros([num_layers], dtype=int)
    down_filter_numbers = np.zeros([num_layers], dtype=int)
    up_conv_kernel_sizes = np.zeros([num_layers], dtype=int)
    up_filter_numbers = np.zeros([num_layers], dtype=int)
    for layer_index in range(num_layers):
        down_conv_kernel_sizes[layer_index] = int(3)
        down_filter_numbers[layer_index] = int( (layer_index + 1) * filter_multiplier + num_classes )
        up_conv_kernel_sizes[layer_index] = int(4)
        up_filter_numbers[layer_index] = int( (num_layers - layer_index - 1) * filter_multiplier + num_classes )
    print("Number of layers:       {}".format(num_layers))
    print("Filters in layers down: {}".format(down_filter_numbers))
    print("Filters in layers up:   {}".format(up_filter_numbers))
    for shape, filters in zip(down_conv_kernel_sizes, down_filter_numbers):
        skips.append(output)
        output = Conv3D(filters, (shape, shape, shape), strides=2, padding="same", activation="relu")(output)            
    for shape, filters in zip(up_conv_kernel_sizes, up_filter_numbers):
        output = keras.layers.UpSampling3D()(output)
        skip_output = skips.pop()
        output = concatenate([output, skip_output], axis=4)
        if filters != num_classes:
            output = Conv3D(filters, (shape, shape, shape), activation="relu", padding="same")(output)
            output = BatchNormalization(momentum=.9)(output)
        else:
            output = Conv3D(filters, (shape, shape, shape), activation=activation, padding="same")(output)
    assert len(skips) == 0
    return Model([input_], [output])
#from Nikki
def dice_coefficient(y_true, y_pred, smooth=1e-6, gama=2):
  y_true, y_pred = tf.cast(y_true, dtype=tf.float32), tf.cast(y_pred, tf.float32)
  nominator = 2 * tf.reduce_sum(tf.multiply(y_pred, y_true)) + smooth
  denominator = tf.reduce_sum(y_pred ** gama) + tf.reduce_sum(y_true ** gama) + smooth
  result = tf.divide(nominator, denominator)
  return result

#from Nikki
def focal_loss(targets, inputs, alpha=0.9, gamma=2):    
  targets = K.cast(targets, 'float32')
  BCE = K.binary_crossentropy(targets, inputs)
  BCE_EXP = K.exp(-BCE)
  focal_loss = K.mean(alpha * K.pow((1-BCE_EXP), gamma) * BCE)
  return focal_loss
    
# Load the U-Net model
model = nvidia_unet()

# Compile the model with focal loss
model.compile(optimizer='adam', loss=focal_loss, metrics=[dice_coefficient])

# Predict using the U-Net model
y_pred = model.predict(testing_ultrasound_data)

# Threshold for the predicted segmentation masks
threshold = 0.5
y_pred_thresholded = (y_pred > threshold).astype(np.uint8)

dice_values = []
for i in range(len(testing_segmentation_data)):
    dice_value = K.eval(dice_coefficient(testing_segmentation_data[i], y_pred_thresholded[i]))
    dice_values.append(dice_value)

# Calculate the average Dice coefficient
mean_dice_coefficient = np.mean(dice_values)
print("Mean Dice coefficient:", mean_dice_coefficient)

#results are 0.0128 for the dice
